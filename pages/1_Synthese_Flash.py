# -*- coding: utf-8 -*-
"""
v7.10.6 ‚Äî Synth√®se Flash IA stable
‚úÖ Corrige affichage du tableau S√©lection IA (Ticker, Nom, Signal)
‚úÖ Restaure coh√©rence et formats Streamlit
‚úÖ Compatible lib v7.6 et portefeuille virtuel
"""

import os, json
from datetime import datetime, timezone
import numpy as np
import pandas as pd
import altair as alt
import streamlit as st
from lib import (
    fetch_all_markets, style_variations, load_profile, save_profile,
    news_summary, select_top_actions, fetch_prices
)

# =======================================================
# CONFIGURATION
# =======================================================
st.set_page_config(page_title="Synth√®se Flash IA", page_icon="‚ö°", layout="wide")
st.title("‚ö° Synth√®se Flash ‚Äî March√© Global (IA enrichie)")

# =======================================================
# SIDEBAR
# =======================================================
periode = st.sidebar.radio("P√©riode d‚Äôanalyse", ["Jour", "7 jours", "30 jours"], index=0)
value_col = {"Jour": "pct_1d", "7 jours": "pct_7d", "30 jours": "pct_30d"}[periode]

profil = st.sidebar.radio(
    "Profil IA", ["Prudent", "Neutre", "Agressif"],
    index=["Prudent", "Neutre", "Agressif"].index(load_profile())
)
if st.sidebar.button("üíæ M√©moriser le profil"):
    save_profile(profil)
    st.sidebar.success("Profil sauvegard√©.")

st.sidebar.markdown("---")
st.sidebar.markdown("### üåç March√©s inclus")
include_eu = st.sidebar.checkbox("üá´üá∑ CAC 40 + üá©üá™ DAX", value=True)
include_us = st.sidebar.checkbox("üá∫üá∏ NASDAQ 100 + S&P 500", value=False)
include_ls = st.sidebar.checkbox("üß† LS Exchange (perso)", value=False)

# =======================================================
# DONN√âES MARCH√â
# =======================================================
MARKETS = []
if include_eu: MARKETS += [("CAC 40", None), ("DAX", None)]
if include_us: MARKETS += [("NASDAQ 100", None), ("S&P 500", None)]
if include_ls: MARKETS += [("LS Exchange", None)]

if not MARKETS:
    st.warning("Aucun march√© s√©lectionn√©.")
    st.stop()

data = fetch_all_markets(MARKETS, days_hist=240)
if data.empty:
    st.warning("Aucune donn√©e disponible.")
    st.stop()

for c in ["pct_1d","pct_7d","pct_30d"]:
    if c not in data.columns:
        data[c] = np.nan
valid = data.dropna(subset=["Close"]).copy()

# =======================================================
# SYNTH√àSE GLOBALE
# =======================================================
avg = valid[value_col].mean() * 100 if not valid.empty else np.nan
up = (valid[value_col] > 0).sum()
down = (valid[value_col] < 0).sum()
st.markdown(f"### üß≠ R√©sum√© global ({periode})")
if np.isfinite(avg):
    st.markdown(f"**Variation moyenne : {avg:+.2f}%** ‚Äî {up} hausses / {down} baisses")

disp = valid[value_col].std() * 100 if not valid.empty else np.nan
if np.isfinite(disp):
    if disp < 1: st.caption("March√© calme ‚Äî consolidation technique.")
    elif disp < 2.5: st.caption("Volatilit√© mod√©r√©e ‚Äî rotations sectorielles.")
    else: st.caption("March√© dispers√© ‚Äî forte volatilit√©.")
st.divider()

# =======================================================
# TOP / FLOP
# =======================================================
st.subheader(f"üèÜ Top 10 hausses & ‚õî Baisses ‚Äî {periode}")

def prep(df, asc=False):
    if df.empty: return pd.DataFrame()
    out = df.sort_values(value_col, ascending=asc).head(10).copy()
    out["Variation %"] = (out[value_col] * 100).round(2)
    out["Cours (‚Ç¨)"] = out["Close"].round(2)
    out.rename(columns={"name": "Soci√©t√©"}, inplace=True)
    return out[["Indice","Soci√©t√©","Ticker","Cours (‚Ç¨)","Variation %"]]

col1,col2 = st.columns(2)
with col1:
    top = prep(valid, asc=False)
    st.dataframe(style_variations(top, ["Variation %"]), use_container_width=True, hide_index=True)
with col2:
    flop = prep(valid, asc=True)
    st.dataframe(style_variations(flop, ["Variation %"]), use_container_width=True, hide_index=True)

st.divider()

# =======================================================
# üöÄ S√âLECTION IA ‚Äî Opportunit√©s
# =======================================================
st.subheader("üöÄ S√©lection IA ‚Äî Opportunit√©s id√©ales (TOP 10)")

top_actions = select_top_actions(valid, profile=profil, n=10, include_proximity=True)
if top_actions.empty:
    st.info("Aucune opportunit√© IA disponible.")
else:
    df = top_actions.copy()

    # -- Normalisation des noms de colonnes
    rename_map = {
        "symbol": "Ticker",
        "ticker": "Ticker",
        "name": "Soci√©t√©",
        "shortname": "Soci√©t√©",
    }
    for old, new in rename_map.items():
        if old in df.columns and new not in df.columns:
            df[new] = df[old]

    # -- Ajout des colonnes manquantes
    for c in ["Soci√©t√©", "Ticker", "Cours (‚Ç¨)", "Entr√©e (‚Ç¨)", "Objectif (‚Ç¨)", "Stop (‚Ç¨)", "Proximit√© (%)"]:
        if c not in df.columns:
            df[c] = np.nan

    # -- Calcul du Signal Entr√©e si absent
    if "Signal Entr√©e" not in df.columns:
        def marker(v):
            if pd.isna(v): return "‚ö™"
            if abs(v) <= 2: return "üü¢"
            elif abs(v) <= 5: return "‚ö†Ô∏è"
            return "üî¥"
        df["Signal Entr√©e"] = df["Proximit√© (%)"].apply(marker)

    # -- Nettoyage des doublons
    df = df.loc[:, ~df.columns.duplicated()]

    # -- S√©lection et affichage
    display_cols = ["Soci√©t√©","Ticker","Cours (‚Ç¨)","Entr√©e (‚Ç¨)","Objectif (‚Ç¨)",
                    "Stop (‚Ç¨)","Proximit√© (%)","Signal Entr√©e"]
    st.dataframe(df[display_cols].round(2), use_container_width=True, hide_index=True)

st.divider()

# =======================================================
# üí∏ PORTFEUILLE VIRTUEL ‚Äî SUIVI
# =======================================================
st.subheader("üí∏ Portefeuille virtuel ‚Äî suivi IA")

SUIVI_PATH = "data/suivi_virtuel.json"
os.makedirs("data", exist_ok=True)

def load_suivi():
    try:
        with open(SUIVI_PATH, "r", encoding="utf-8") as f:
            data = json.load(f)
            return data if isinstance(data, list) else []
    except:
        return []

def save_suivi(lst):
    with open(SUIVI_PATH, "w", encoding="utf-8") as f:
        json.dump(lst, f, ensure_ascii=False, indent=2)

montant = st.number_input("üí∂ Montant par ligne (‚Ç¨)", 5.0, step=5.0, value=20.0)
horizon = st.selectbox("Horizon cible", ["1 semaine","2 semaines","1 mois"], index=2)
st.caption("1‚Ç¨ de frais entr√©e + 1‚Ç¨ de sortie inclus.")

if not top_actions.empty:
    for i, r in df.iterrows():
        c1, c2, c3, c4, c5, c6 = st.columns([3,1,1,1,1,1])
        c1.markdown(f"**{r.get('Soci√©t√©','?')}** ({r.get('Ticker','?')})")
        c2.markdown(f"{r.get('Cours (‚Ç¨)',np.nan):.2f} ‚Ç¨")
        c3.markdown(f"üéØ {r.get('Objectif (‚Ç¨)',np.nan):.2f} ‚Ç¨")
        c4.markdown(f"üõë {r.get('Stop (‚Ç¨)',np.nan):.2f} ‚Ç¨")
        prox = r.get('Proximit√© (%)', np.nan)
        c5.markdown(f"{prox:+.2f}%" if pd.notna(prox) else "‚Äî")
        if c6.button("‚ûï Ajouter", key=f"a{i}"):
            items = load_suivi()
            entry = float(r.get("Entr√©e (‚Ç¨)") or r.get("Cours (‚Ç¨)") or np.nan)
            target = float(r.get("Objectif (‚Ç¨)") or np.nan)
            stop = float(r.get("Stop (‚Ç¨)") or np.nan)
            qty = (montant - 1) / entry if entry > 0 else 0
            rend = ((target - entry) / entry * 100 - 2 / entry * 100) if np.isfinite(entry) and np.isfinite(target) else np.nan
            items.append({
                "ticker": r.get("Ticker"),
                "name": r.get("Soci√©t√©"),
                "entry": entry,
                "target": target,
                "stop": stop,
                "amount": montant,
                "qty": qty,
                "rendement_estime_pct": rend,
                "added_at": datetime.now(timezone.utc).isoformat(),
                "horizon": horizon
            })
            save_suivi(items)
            st.success(f"Ajout√© : {r.get('Soci√©t√©')} ({r.get('Ticker')})")

st.divider()
